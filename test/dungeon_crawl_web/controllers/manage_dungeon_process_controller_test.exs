defmodule DungeonCrawlWeb.ManageDungeonInstanceControllerTest do
  use DungeonCrawlWeb.ConnCase

  alias DungeonCrawl.DungeonInstances
  alias DungeonCrawl.DungeonProcesses.DungeonRegistry

  describe "non registered users" do
    test "redirects non admin users", %{conn: conn} do
      conn = get conn, manage_dungeon_process_path(conn, :index)
      assert redirected_to(conn) == page_path(conn, :index)
    end
    # overkill to hit the other methods
  end

  describe "registered user but not admin" do
    setup [:normal_user]

    test "redirects non admin users", %{conn: conn} do
      conn = get conn, manage_dungeon_process_path(conn, :index)
      assert redirected_to(conn) == page_path(conn, :index)
    end
    # overkill to hit the other methods
  end

  describe "with an admin user" do
    setup [:admin_user]

    test "lists all entries on index", %{conn: conn} do
      setup_dungeon_instance()
      conn = get conn, manage_dungeon_process_path(conn, :index)
      assert html_response(conn, 200) =~ "Listing dungeon instances"
    end

    test "shows chosen dungeon instance", %{conn: conn} do
      instance = setup_dungeon_instance()
      conn = get conn, manage_dungeon_process_path(conn, :show, instance.id)
      assert html_response(conn, 200) =~ "DB Backed Dungeon Process"
    end

    test "shows chosen dungeon instance when no backing db instance", %{conn: conn} do
      instance = setup_dungeon_instance()
      DungeonInstances.delete_dungeon(instance)
      conn = get conn, manage_dungeon_process_path(conn, :show, instance.id)
      assert html_response(conn, 200) =~ "Orphaned Dungeon Process"
    end

    test "redirects with a message when dungeon instance is nonexistent", %{conn: conn} do
      setup_dungeon_instance()
      conn = get conn, manage_dungeon_process_path(conn, :show, -1)
      assert redirected_to(conn) == manage_dungeon_process_path(conn, :index)
      assert get_flash(conn, :info) == "Dungeon instance process not found: `-1`"
    end

    test "deletes chosen dungeon instance", %{conn: conn} do
      instance = setup_dungeon_instance()
      conn = delete conn, manage_dungeon_process_path(conn, :delete, instance.id)
      assert redirected_to(conn) == manage_dungeon_process_path(conn, :index)
      :timer.sleep 50
      assert DungeonInstances.get_dungeon(instance.id)
      assert :error = DungeonRegistry.lookup(DungeonInstanceRegistry, instance.id)
    end
  end

  defp normal_user(_) do
    user = insert_user(%{username: "Threepwood", is_admin: false})
    conn = assign(build_conn(), :current_user, user)
    {:ok, conn: conn, user: user}
  end

  defp admin_user(_) do
    user = insert_user(%{username: "CSwaggins", is_admin: true})
    conn = assign(build_conn(), :current_user, user)
    {:ok, conn: conn, user: user}
  end

  defp setup_dungeon_instance() do
    di = insert_autogenerated_dungeon_instance()
    DungeonRegistry.create(DungeonInstanceRegistry, di.id)
    di
  end
end
