defmodule DungeonCrawlWeb.CrawlerTest do
  use DungeonCrawlWeb.ChannelCase

  alias DungeonCrawlWeb.DungeonChannel
  alias DungeonCrawlWeb.Crawler
  alias DungeonCrawl.Player

  alias DungeonCrawl.DungeonProcesses.{Instances, InstanceProcess, InstanceRegistry}

  test "join_and_broadcast/4 joining a dungeon" do
    map_set = insert_autogenerated_map_set()
    assert %Player.Location{} = location = Crawler.join_and_broadcast(map_set, "itsmehash", %{color: "red"}, true)
    map_tile = Repo.preload(location, :map_tile).map_tile

    # It registers the player location
    {:ok, instance} = InstanceRegistry.lookup_or_create(DungeonInstanceRegistry, map_tile.map_instance_id)
    location_map_tile_id = map_tile.id
    assert %Instances{player_locations: %{^location_map_tile_id => ^location}} = InstanceProcess.get_state(instance)

    # cleanup
    InstanceRegistry.remove(DungeonInstanceRegistry, map_tile.map_instance_id)
  end

  test "join_and_broadcast/4 joining an instance" do
    msi = insert_autogenerated_map_set_instance()
    instance = Repo.preload(msi, :maps).maps |> Enum.at(0)
    instance_id = instance.id
    {:ok, _, _socket} =
      socket("user_id_hash", %{user_id_hash: "itsmehash"})
      |> subscribe_and_join(DungeonChannel, "dungeons:#{instance.id}")

    assert %Player.Location{} = location = Crawler.join_and_broadcast(msi, "itsmehash", %{color: "red", background_color: "green"}, nil)
    map_tile = Repo.preload(location, :map_tile).map_tile

    assert_broadcast "tile_changes", payload
    assert %{tiles: [%{row: map_tile.row, col: map_tile.col, rendering: "<div>@</div>"}]} == payload

    # It registers the player location
    {:ok, instance} = InstanceRegistry.lookup_or_create(DungeonInstanceRegistry, instance.id)
    location_map_tile_id = map_tile.id
    assert %Instances{player_locations: %{^location_map_tile_id => ^location}} = InstanceProcess.get_state(instance)

    # cleanup
    InstanceRegistry.remove(DungeonInstanceRegistry, instance_id)
  end

  test "leave_and_broadcast" do
    msi = insert_autogenerated_map_set_instance()
    DungeonCrawl.Repo.update DungeonCrawl.DungeonInstances.MapSet.changeset(msi, %{autogenerated: false})
    map_instance = Repo.preload(msi, :maps).maps |> Enum.at(0)
    location = insert_player_location(%{map_instance_id: map_instance.id, row: 1, user_id_hash: "itsmehash", state: "cash: 2"})
    location2 = insert_player_location(%{map_instance_id: map_instance.id, row: 2, user_id_hash: "someoneelsetokeeptheinstance"})
    location2_id = location2.map_tile_instance_id
    map_instance_id = map_instance.id

    {:ok, _, _socket} =
      socket("user_id_hash", %{user_id_hash: "itsmehash"})
      |> subscribe_and_join(DungeonChannel, "dungeons:#{map_instance.id}")

    assert %Player.Location{} = location = Repo.preload(Crawler.leave_and_broadcast(location), :map_tile)

    rendering = "<div style='color: gray;background-color: linen'>Ð”</div>"
    assert_broadcast "tile_changes", payload
    assert %{tiles: [%{row: location.map_tile.row, col: location.map_tile.col, rendering: rendering}]} == payload

    # It unregisters the player location
    {:ok, instance} = InstanceRegistry.lookup_or_create(DungeonInstanceRegistry, map_instance.id)
    state = InstanceProcess.get_state(instance)
    assert %{^location2_id => %{user_id_hash: "someoneelsetokeeptheinstance"}} = state.player_locations

    # It dropped the players stuff
    junk_pile = Instances.get_map_tile(state, location.map_tile)
    assert junk_pile.script =~ ~r/#GIVE cash, 2, \?sender/i

    # cleanup
    InstanceRegistry.remove(DungeonInstanceRegistry, map_instance_id)
  end
end
