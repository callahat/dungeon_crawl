defmodule DungeonCrawlWeb.CrawlerTest do
  use DungeonCrawlWeb.ChannelCase

  alias DungeonCrawlWeb.DungeonChannel
  alias DungeonCrawlWeb.Crawler
  alias DungeonCrawl.Player

  test "join_and_broadcast/2 joining a dungeon" do
    dungeon = insert_autogenerated_dungeon()
    assert %Player.Location{} = Crawler.join_and_broadcast(dungeon, "itsmehash")
    # If a broadcast happens in an empty room does it go anywhere
  end

  test "join_and_broadcast/2 joining an instance" do
    instance = insert_autogenerated_dungeon_instance()
    {:ok, _, _socket} =
      socket("user_id_hash", %{user_id_hash: "itsmehash"})
      |> subscribe_and_join(DungeonChannel, "dungeons:#{instance.id}")
    
    assert %Player.Location{} = location = Repo.preload(Crawler.join_and_broadcast(instance, "itsmehash"), :map_tile)

    assert_broadcast "tile_changes", payload
    assert %{tiles: [%{row: location.map_tile.row, col: location.map_tile.col, rendering: "<div>@</div>"}]} == payload
  end

  test "leave_and_broadcast" do
    instance = insert_autogenerated_dungeon_instance(%{}, true)
    location = insert_player_location(%{map_instance_id: instance.id, row: 1, user_id_hash: "itsmehash"})
    insert_player_location(%{map_instance_id: instance.id, row: 2, user_id_hash: "someoneelsetokeeptheinstance"})

    {:ok, _, _socket} =
      socket("user_id_hash", %{user_id_hash: "itsmehash"})
      |> subscribe_and_join(DungeonChannel, "dungeons:#{instance.id}")
    
    assert %Player.Location{} = location = Repo.preload(Crawler.leave_and_broadcast(location), :map_tile)

    assert_broadcast "tile_changes", payload
    assert %{tiles: [%{row: location.map_tile.row, col: location.map_tile.col, rendering: "<div>.</div>"}]} == payload
  end
end
