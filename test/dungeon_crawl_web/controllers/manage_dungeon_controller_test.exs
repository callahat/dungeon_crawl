defmodule DungeonCrawlWeb.ManageDungeonControllerTest do
  use DungeonCrawlWeb.ConnCase

  alias DungeonCrawl.Dungeon

  describe "non registered users" do
    test "redirects non admin users", %{conn: conn} do
      conn = get conn, manage_dungeon_path(conn, :index)
      assert redirected_to(conn) == page_path(conn, :index)
    end
    # overkill to hit the other methods
  end

  describe "registered user but not admin" do
    setup [:normal_user]

    test "redirects non admin users", %{conn: conn} do
      conn = get conn, manage_dungeon_path(conn, :index)
      assert redirected_to(conn) == page_path(conn, :index)
    end
    # overkill to hit the other methods
  end

  describe "with an admin user" do
    setup [:admin_user]

    test "lists all entries on index", %{conn: conn} do
      conn = get conn, manage_dungeon_path(conn, :index)
      assert html_response(conn, 200) =~ "Listing dungeons"
    end

    test "shows chosen resource", %{conn: conn} do
      dungeon = insert_autogenerated_dungeon()
      conn = get conn, manage_dungeon_path(conn, :show, dungeon)
      assert html_response(conn, 200) =~ "Dungeon: "
    end

    test "shows chosen resource with instance", %{conn: conn} do
      instance = Repo.preload insert_autogenerated_dungeon_instance(), :dungeon
      conn = get conn, manage_dungeon_path(conn, :show, instance.dungeon, instance_id: instance.id)
      assert html_response(conn, 200) =~ "Dungeon: "
    end

    test "renders page not found when id is nonexistent", %{conn: conn} do
      assert_error_sent 404, fn ->
        get conn, manage_dungeon_path(conn, :show, -1)
      end
    end

    test "deletes chosen resource", %{conn: conn} do
      dungeon = insert_autogenerated_dungeon()
      conn = delete conn, manage_dungeon_path(conn, :delete, dungeon)
      assert redirected_to(conn) == manage_dungeon_path(conn, :index)
      assert Dungeon.get_map(dungeon.id)
      assert Dungeon.get_map(dungeon.id).deleted_at
    end
  end

  defp normal_user(_) do
    user = insert_user(%{username: "Threepwood", is_admin: false})
    conn = assign(build_conn(), :current_user, user)
    {:ok, conn: conn, user: user}
  end

  defp admin_user(_) do
    user = insert_user(%{username: "CSwaggins", is_admin: true})
    conn = assign(build_conn(), :current_user, user)
    {:ok, conn: conn, user: user}
  end
end
