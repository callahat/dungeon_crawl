defmodule DungeonCrawlWeb.ManageLevelInstanceControllerTest do
  use DungeonCrawlWeb.ConnCase

  alias DungeonCrawl.DungeonInstances
  alias DungeonCrawl.DungeonProcesses.LevelRegistry
  alias DungeonCrawl.DungeonProcesses.Registrar
  alias DungeonCrawl.DungeonProcesses.DungeonRegistry

  describe "non registered users" do
    test "redirects non admin users", %{conn: conn} do
      conn = get conn, manage_level_process_path(conn, :show, 1, 1, "none")
      assert redirected_to(conn) == page_path(conn, :index)
    end
    # overkill to hit the other methods
  end

  describe "registered user but not admin" do
    setup [:normal_user]

    test "redirects non admin users", %{conn: conn} do
      conn = get conn, manage_level_process_path(conn, :show, 1, 1, "none")
      assert redirected_to(conn) == page_path(conn, :index)
    end
    # overkill to hit the other methods
  end

  describe "with an admin user" do
    setup [:admin_user]

    test "shows chosen instance", %{conn: conn} do
      instance = setup_level_instance()
      conn = get conn, manage_level_process_path(conn, :show, instance.dungeon_instance_id, instance.number, instance.player_location_id || "none")
      assert html_response(conn, 200) =~ "DB Backed Level Instance Process"
    end

    test "shows chosen solo instance", %{conn: conn} do
      instance = setup_level_instance()
      conn = get conn, manage_level_process_path(conn, :show, instance.dungeon_instance_id, instance.number, instance.player_location_id || "none")
      assert html_response(conn, 200) =~ "DB Backed Level Instance Process"
    end

    test "shows chosen instance when its owned by a player", %{conn: conn} do
      instance = setup_solo_level_instance()
      conn = get conn, manage_level_process_path(conn, :show, instance.dungeon_instance_id, instance.number, instance.player_location_id)
      assert html_response(conn, 200) =~ "DB Backed Level Instance Process"
    end

    test "shows chosen instance when no backing db instance", %{conn: conn} do
      instance = setup_level_instance()

      {:ok, instance_registry} = Registrar.instance_registry(instance.dungeon_instance_id)
      LevelRegistry.create(instance_registry, nil, 2, [], [], %{rows: 0, cols: 0}, instance.dungeon_instance_id, 2)
      conn = get conn, manage_level_process_path(conn, :show, instance.dungeon_instance_id, 2, instance.player_location_id || "none")
      assert html_response(conn, 200) =~ "Orphaned Level Instance Process"
    end

    test "redirects with a message when instance is nonexistent", %{conn: conn} do
      instance = setup_level_instance()
      conn = get conn, manage_level_process_path(conn, :show, instance.dungeon_instance_id, -1, instance.player_location_id || "none")
      assert redirected_to(conn) == manage_dungeon_process_path(conn, :show, instance.dungeon_instance_id)
      assert get_flash(conn, :info) ==
               "Level instance process not found: dungeon instance `#{instance.dungeon_instance_id}`, level number `-1`, owner id ``"
    end

    test "deletes chosen instance", %{conn: conn} do
      instance = setup_level_instance()
      {:ok, instance_registry} = Registrar.instance_registry(instance.dungeon_instance_id)
      conn = delete conn, manage_level_process_path(conn, :delete, instance.dungeon_instance_id, instance.number, instance.player_location_id || "none")
      assert redirected_to(conn) == manage_dungeon_process_path(conn, :show, instance.dungeon_instance_id)
      :timer.sleep 5
      assert DungeonInstances.get_level(instance.dungeon_instance_id, instance.number)
      assert :error = LevelRegistry.lookup(instance_registry, instance.number, instance.player_location_id)
    end

    test "deletes chosen solo instance", %{conn: conn} do
      instance = setup_solo_level_instance()
      {:ok, instance_registry} = Registrar.instance_registry(instance.dungeon_instance_id)
      conn = delete conn, manage_level_process_path(conn, :delete, instance.dungeon_instance_id, instance.number, instance.player_location_id)
      assert redirected_to(conn) == manage_dungeon_process_path(conn, :show, instance.dungeon_instance_id)
      :timer.sleep 5
      assert DungeonInstances.get_level(instance.dungeon_instance_id, instance.number, instance.player_location_id)
      assert :error = LevelRegistry.lookup(instance_registry, instance.number, instance.player_location_id)
    end
  end

  defp normal_user(_) do
    user = insert_user(%{username: "Threepwood", is_admin: false})
    conn = assign(build_conn(), :current_user, user)
    {:ok, conn: conn, user: user}
  end

  defp admin_user(_) do
    user = insert_user(%{username: "CSwaggins", is_admin: true})
    conn = assign(build_conn(), :current_user, user)
    {:ok, conn: conn, user: user}
  end

  defp setup_level_instance() do
    level_instance = insert_autogenerated_level_instance()
    DungeonRegistry.create(DungeonInstanceRegistry, level_instance.dungeon_instance_id)
    level_instance
  end

  defp setup_solo_level_instance() do
    level_instance = insert_autogenerated_level_instance(%{state: "solo: true"})
    location = insert_player_location(%{level_instance_id: level_instance.id, user_id_hash: "testhash"})
    level_instance = DungeonInstances.Level.changeset(level_instance, %{player_location_id: location.id})
                     |> DungeonCrawl.Repo.update!
    DungeonRegistry.create(DungeonInstanceRegistry, level_instance.dungeon_instance_id)
    level_instance
  end
end
