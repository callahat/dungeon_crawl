defmodule DungeonCrawlWeb.DungeonViewTest do
  use DungeonCrawlWeb.ConnCase, async: true

  alias DungeonCrawlWeb.DungeonView

  test "activate_or_new_version_button/2 renders activate if dungeon inactive", %{conn: conn} do
    map_set = insert_autogenerated_map_set(%{active: false})
    assert Regex.match?(~r{Activate}, inspect(DungeonView.activate_or_new_version_button(conn, map_set, nil)))
    assert Regex.match?(~r{Test Crawl}, inspect(DungeonView.activate_or_new_version_button(conn, map_set, nil)))
    refute Regex.match?(~r{Your current crawl will be lost}, inspect(DungeonView.activate_or_new_version_button(conn, map_set, nil)))

    msi = insert_stubbed_map_set_instance(%{active: true})
    instance = Repo.preload(msi, :maps).maps |> Enum.at(0)
    location = insert_player_location(%{map_instance_id: instance.id, user_id_hash: "testhash"})
    assert Regex.match?(~r{Test Crawl}, inspect(DungeonView.activate_or_new_version_button(conn, map_set, location)))
    assert Regex.match?(~r{Your current crawl will be lost}, inspect(DungeonView.activate_or_new_version_button(conn, map_set, location)))
  end

  test "activate_or_new_version_button/2 renders nothing if a new version already exists", %{conn: conn} do
    map_set = insert_autogenerated_map_set()
    _new_version = insert_autogenerated_dungeon(%{previous_version_id: map_set.id})
    refute DungeonView.activate_or_new_version_button(conn, map_set, nil)
  end

  test "activate_or_new_version_button/2 renders new_version if dungeon active", %{conn: conn} do
    map_set = insert_autogenerated_map_set()
    assert Regex.match?(~r{New Version}, inspect(DungeonView.activate_or_new_version_button(conn, map_set, nil)))
  end
end
