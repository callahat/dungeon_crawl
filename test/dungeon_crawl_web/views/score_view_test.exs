defmodule DungeonCrawlWeb.ScoreViewTest do
  use DungeonCrawlWeb.ConnCase, async: true
  import DungeonCrawlWeb.ScoreView

  test "format_duration/1" do
    assert "none" == format_duration(nil)

    assert "00' 00\"" == format_duration(0)
    assert "00' 57\"" == format_duration(57)

    assert "01' 59\"" == format_duration(119)
    assert "23' 01\"" == format_duration(22 * 60 + 61)
    assert "01:00:00" == format_duration(3600)

    assert "1 day, 00:01:02" == format_duration(3600 * 24 + 62)
    assert "2 days, 01:59:05" == format_duration(3600 * 48 + 60 * 60 + 60 * 59 + 5)
  end

  test "score_filter_link/2", %{conn: conn} do
    # fake a score with preloaded dungeon
    score = %{ dungeon: nil }
    assert Phoenix.HTML.safe_to_string(score_filter_link(conn, score)) ==
             "<a href=\"/scores?dungeon_id=null\" title=\"Hi scores for `(Autogenerated)`\">(Autogenerated)</a>"

    # fake a score for a designer dungeon
    score = %{ dungeon: %{name: "Maze", id: 12345, version: 2} }
    assert Phoenix.HTML.safe_to_string(score_filter_link(conn, score)) ==
             "<a href=\"/scores?dungeon_id=12345\" title=\"Hi scores for `Maze (v. 2)`\">Maze (v. 2)</a>"
  end

  test "score_filter_link/3", %{conn: conn} do
    # the filter params end up in the query string
    # dungeon
    assert Phoenix.HTML.safe_to_string(score_filter_link(conn, "whatever", %{dungeon_id: "null"})) ==
             "<a href=\"/scores?dungeon_id=null\" title=\"Hi scores for `whatever`\">whatever</a>"
    # player
    assert Phoenix.HTML.safe_to_string(score_filter_link(conn, "Nobody", %{user_id: 1})) ==
             "<a href=\"/scores?user_id=1\" title=\"Hi scores for `Nobody`\">Nobody</a>"
  end
end
