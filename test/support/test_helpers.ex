defmodule DungeonCrawlWeb.TestHelpers do
  alias DungeonCrawl.Repo
  alias DungeonCrawl.TileTemplates
  alias DungeonCrawl.DungeonInstances
  alias DungeonCrawl.MapGenerators.TestRooms

  def insert_user(attrs \\ %{}) do
    changes = Map.merge(%{
      name: "Some User",
      username: "user#{Base.encode16(:crypto.strong_rand_bytes(8))}",
      password: "secretsauce",
    }, attrs)

    %DungeonCrawl.Account.User{}
    |> DungeonCrawl.Account.User.admin_changeset(changes)
    |> DungeonCrawl.Account.User.put_user_id_hash(:base64.encode(:crypto.strong_rand_bytes(24)))
    |> Repo.insert!()
  end

  def insert_tile_template(attrs \\ %{}) do
    changes= Map.merge(%{
      name: "Floor",
      description: "A dusty floor",
      character: ".",
      state: "blocking: false",
      script: ""
    }, attrs)

    {:ok, tile_template} = TileTemplates.create_tile_template(changes)
    tile_template
  end

  def insert_autogenerated_dungeon_instance(attrs \\ %{}, to_be_edited \\ false) do
    dungeon = insert_autogenerated_dungeon(attrs, to_be_edited)

    {:ok, %{map_set: _, maps: [instance | _]}} = DungeonInstances.create_map_set(Repo.preload(dungeon, :map_set).map_set)
    instance
  end

  def insert_autogenerated_dungeon(attrs \\ %{}, to_be_edited \\ false) do
    changes = Map.merge(%{
      name: "Autogenerated",
      height: 21,
      width: 21,
      active: true,
      map_set_id: attrs[:map_set_id] || insert_map_set(attrs).id
    }, attrs)

    {:ok, %{dungeon: dungeon}} = DungeonCrawl.Dungeon.generate_map(TestRooms, changes)
    dungeon
  end

  def insert_map_set(attrs \\ %{}) do
    attrs = Map.merge(%{
      name: "Autogenerated",
      active: true
    }, attrs)

    {:ok, map_set} = DungeonCrawl.Dungeon.create_map_set(attrs)
    map_set
  end

  def insert_autogenerated_map_set(attrs \\ %{}, map_attrs \\ %{}) do
    map_set = insert_map_set(attrs)
    insert_autogenerated_dungeon(Map.put(map_attrs, :map_set_id, map_set.id))
    map_set
  end

  def insert_autogenerated_map_set_instance(attrs \\ %{}, map_attrs \\ %{}) do
    map_set = insert_map_set(attrs)
    insert_autogenerated_dungeon(Map.put(map_attrs, :map_set_id, map_set.id))
    {:ok, %{map_set: map_set_instance, maps: _}} = DungeonInstances.create_map_set(map_set)
    map_set_instance
  end

  def insert_stubbed_map_set_instance(attrs \\ %{}, map_attrs \\ %{}, maps \\ [[]]) do
    map_set = insert_stubbed_map_set(attrs, map_attrs, maps)
    {:ok, %{map_set: map_set_instance, maps: _}} = DungeonInstances.create_map_set(map_set)
    map_set_instance
  end

  def insert_stubbed_map_set(attrs \\ %{}, map_attrs \\ %{}, maps \\ [[]]) do
    map_set = insert_map_set(attrs)
    maps = Enum.map(maps, fn(map) -> insert_stubbed_dungeon(Map.put(map_attrs, :map_set_id, map_set.id), map) end)
    map_set
  end

  def insert_stubbed_dungeon_instance(attrs \\ %{}, tiles \\ []) do
    dungeon = insert_stubbed_dungeon(attrs, tiles)
    msi = DungeonInstances.create_map_set(Repo.preload(dungeon,:map_set).map_set)
    {:ok, %{map_set: %{maps: [instance]}}} = DungeonInstances.create_map(dungeon, msi.id)
    instance
  end

  def insert_stubbed_dungeon(attrs \\ %{}, tiles \\ []) do
    changes = Map.merge(%DungeonCrawl.Dungeon.Map{
      name: "Stubbed",
      height: 20,
      width: 20,
      map_set_id: attrs[:map_set_id] || insert_map_set(attrs).id
    }, attrs)

    dungeon = DungeonCrawl.Dungeon.change_map(changes) |> Repo.insert!
    Repo.insert_all(DungeonCrawl.Dungeon.MapTile, _tile_hydrator(dungeon.id, tiles))
    dungeon
  end

  defp _tile_hydrator(dungeon_id, tiles) do
    tiles
    |> Enum.map(fn(t) -> %{dungeon_id: dungeon_id,
                           row: t.row,
                           col: t.col,
                           tile_template_id: Map.get(t, :tile_template_id),
                           z_index: t.z_index,
                           character: t.character,
                           color: Map.get(t, :color),
                           background_color: Map.get(t, :background_color),
                           state: Map.get(t, :state),
                           script: Map.get(t, :script),
                           name: Map.get(t, :name)
                          } end)
  end

  def insert_player_map_tile(attrs \\ %{}) do
    changes = Map.merge(%{
      row: 3,
      col: 1,
      character: "@",
      state: "blocking: true",
      script: ""
    }, attrs)

    player_tile_template = DungeonCrawl.TileTemplates.TileSeeder.player_character_tile()

    Map.take(changes, [:map_instance_id, :row, :col, :character, :state, :script])
    |> Map.merge(%{tile_template_id: player_tile_template.id, z_index: 1})
    |> DungeonCrawl.DungeonInstances.create_map_tile!()
  end

  def insert_player_location(attrs \\ %{}) do
    changes = Map.merge(%{
      user_id_hash: "good_hash",
    }, attrs)

    map_tile_id = if changes[:map_tile_instance_id], do: changes[:map_tile_instance_id], else: insert_player_map_tile(changes).id

    DungeonCrawl.Player.create_location!(%{user_id_hash: changes.user_id_hash, map_tile_instance_id: map_tile_id})
  end
end
