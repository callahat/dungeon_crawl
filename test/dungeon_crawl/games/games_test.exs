defmodule DungeonCrawl.GamesTest do
  use DungeonCrawl.DataCase

  alias DungeonCrawl.Games
  alias DungeonCrawl.Player
  alias DungeonCrawl.Player.Location

  import DungeonCrawlWeb.TestHelpers

  describe "saved_games" do
    alias DungeonCrawl.Games.Save

    import DungeonCrawl.GamesFixtures

    @invalid_attrs %{col: nil, row: nil, state: nil, user_id_hash: nil}

    test "list_saved_games/0 returns all saved_games" do
      save = save_fixture()
      assert Games.list_saved_games() == [save]
    end

    test "get_save/1 returns the save with given id" do
      save = save_fixture()
      assert Games.get_save(save.id) == save
    end

    test "create_save/1 with valid data creates a save" do
      valid_attrs = %{col: 42, row: 42, state: "valid: state", user_id_hash: "some user_id_hash",
        level_instance_id: insert_autogenerated_level_instance().id}

      assert {:ok, %Save{} = save} = Games.create_save(valid_attrs)
      assert save.col == 42
      assert save.row == 42
      assert save.state == "valid: state"
      assert save.user_id_hash == "some user_id_hash"
    end

    test "create_save/1 with invalid data returns error changeset" do
      assert {:error, %Ecto.Changeset{}} = Games.create_save(@invalid_attrs)
    end

    test "update_save/2 with valid data updates the save" do
      save = save_fixture()
      update_attrs = %{col: 43, row: 43, state: "some updated state", user_id_hash: "some updated user_id_hash"}

      assert {:ok, %Save{} = save} = Games.update_save(save, update_attrs)
      assert save.col == 43
      assert save.row == 43
      assert save.state == "some updated state"
      assert save.user_id_hash == "some updated user_id_hash"
    end

    test "update_save/2 with invalid data returns error changeset" do
      save = save_fixture()
      assert {:error, %Ecto.Changeset{}} = Games.update_save(save, @invalid_attrs)
      assert save == Games.get_save(save.id)
    end

    test "load_save/1 invalid save id returns error" do
      assert {:error, 'Save not found'} = Games.load_save(1)
    end

    test "load_save/1 invalid user" do
      save = save_fixture(%{user_id_hash: "junk"})
      assert {:error, 'Player not found'} = Games.load_save(save.id)
    end

    test "load_save/1 creates the player location and tile instance" do
      user = insert_user()
      save = save_fixture(%{user_id_hash: user.user_id_hash})

      refute Player.get_location(user.user_id_hash)

      assert {:ok, %Location{}} = Games.load_save(save.id)
      assert Player.get_location(user.user_id_hash)

      # won't load a game when already crawling
      assert {:error, 'Player already in a game'} = Games.load_save(save.id)
    end

    test "delete_save/1 deletes the save" do
      save = save_fixture()
      assert {:ok, %Save{}} = Games.delete_save(save)
      refute Games.get_save(save.id)
    end

    test "change_save/1 returns a save changeset" do
      save = save_fixture()
      assert %Ecto.Changeset{} = Games.change_save(save)
    end
  end
end
