defmodule DungeonCrawl.Shipping.DockWorkerTest do
  use DungeonCrawl.DataCase

  alias DungeonCrawl.Shipping.DockWorker

  alias DungeonCrawl.Dungeons
  alias DungeonCrawl.Shipping
  alias DungeonCrawl.Shipping.{DungeonExports, Json}
  alias DungeonCrawl.Equipment.Seeder, as: EquipmentSeeder
  alias DungeonCrawl.Sound.Seeder, as: SoundSeeder

  setup do
    EquipmentSeeder.gun
    SoundSeeder.click
    SoundSeeder.shoot

    dock_worker = start_supervised!(DockWorker)

    user = insert_user()

    %{dock_worker: dock_worker, user: user}
  end

  test "export/2", %{dock_worker: dock_worker, user: user} do
    dungeon = insert_dungeon()
    {:ok, dungeon_export} = Shipping.create_export(%{dungeon_id: dungeon.id, user_id: user.id})

    assert :ok = DockWorker.export(dock_worker, dungeon_export.id)

    assert %{dungeon_id: dungeon.id,
             status: :completed,
             data: DungeonExports.run(dungeon.id) |> Json.encode!(),
             user_id: user.id,
             file_name: "Autogenerated_v_1.json"}
           == Map.take(Shipping.get_export!(dungeon_export.id), [:dungeon_id, :status, :data, :user_id, :file_name])
  end

  test "import/3", %{dock_worker: dock_worker, user: user} do
    dungeon = insert_dungeon()
    {:ok, dungeon_import} = Shipping.create_import(%{
      data: DungeonExports.run(dungeon.id) |> Json.encode!(),
      user_id: user.id,
      file_name: "import.json"
    })

    assert :ok = DockWorker.import(dock_worker, dungeon_import.id, user.id)

    # the original + the imported
    assert 2 == Enum.count(Dungeons.list_dungeons())

    imported_dungeon = Dungeons.list_dungeons() |> Enum.at(1)

    assert %{dungeon_id: imported_dungeon.id,
             status: :completed,
             user_id: user.id,
             file_name: "import.json"}
           == Map.take(Shipping.get_import!(dungeon_import.id), [:dungeon_id, :status, :user_id, :file_name])
    assert user.id == imported_dungeon.user_id
  end

end