defmodule DungeonCrawl.DungeonInstances.LevelHeaderTest do
  use DungeonCrawl.DataCase

  alias DungeonCrawl.Repo
  alias DungeonCrawl.DungeonInstances.LevelHeader
  alias DungeonCrawl.Player.Location

  test "on_delete deletes all associated player_locations" do
    level_instance = insert_autogenerated_level_instance()
    player_loc = insert_player_location(%{level_instance_id: level_instance.id})
    level_header = Repo.preload(level_instance, :level_header).level_header

    assert Repo.preload(level_header, :locations).locations != []
    assert Repo.delete(level_header)
    refute Repo.get_by(Location, %{user_id_hash: player_loc.user_id_hash})
    assert Repo.preload(level_header, :locations).locations == []
  end

  test "level_instance number must be unique for dungeon" do
    level_instance = insert_autogenerated_level_instance()
    level_header = Repo.preload(level_instance, :level_header).level_header
    changeset = LevelHeader.changeset(
                  %LevelHeader{},
                  Map.take(level_header, [:number, :level_id, :dungeon_instance_id])
                )
    assert {:error, %{errors: [number: {"Level Number already exists", _}]}} = Repo.insert(changeset)
  end
end
