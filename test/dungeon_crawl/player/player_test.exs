defmodule DungeonCrawl.PlayerTest do
  use DungeonCrawl.DataCase

  alias DungeonCrawl.Player

  describe "player_locations" do
    alias DungeonCrawl.Player.Location

    @valid_attrs %{user_id_hash: "some content"}
    @invalid_attrs %{user_id_hash: nil}

    def location_fixture(attrs \\ %{user_id_hash: "test_hash"}) do
      dungeon = insert_autogenerated_dungeon()
      insert_player_location(Map.merge(%{dungeon_id: dungeon.id}, attrs))
    end

    test "get_location/1" do
      location = location_fixture(%{user_id_hash: "getLocation"})
      assert Player.get_location!("getLocation") == location
    end

    test "create_location/1 with valid data returns a location" do
      dungeon = insert_autogenerated_dungeon()
      player_map_tile = insert_player_map_tile(Map.merge(%{dungeon_id: dungeon.id}, @valid_attrs))
      assert {:ok, %Location{} = _location} = Player.create_location(Map.merge(%{map_tile_id: player_map_tile.id}, @valid_attrs))
    end

    test "create_location/1 with invalid data returns error changeset" do
      assert {:error, %Ecto.Changeset{}} = Player.create_location(Map.merge(%{}, @invalid_attrs))
    end
    
    test "create_location!/1 with good params returns a location" do
      dungeon = insert_autogenerated_dungeon()
      player_map_tile = insert_player_map_tile(Map.merge(%{dungeon_id: dungeon.id}, @valid_attrs))
      assert %Location{} = _location = Player.create_location!(Map.merge(%{map_tile_id: player_map_tile.id}, @valid_attrs))
    end

    test "delete_location!/1 deletes the location" do
      location = location_fixture()
      assert %Location{} = Player.delete_location!(location)
      assert_raise Ecto.NoResultsError, fn -> Player.get_location!(location.user_id_hash) end
    end

    test "delete_location!/1 deletes the location associated with the user_id_hash" do
      location_fixture(%{user_id_hash: "deletedHash"})
      assert %Location{} = Player.delete_location!("deletedHash")
      assert_raise Ecto.NoResultsError, fn -> Player.get_location!("deletedHash")  end
    end

    test "change_location/2 returns a location changeset" do
      location = location_fixture()
      assert %Ecto.Changeset{} = Player.change_location(location)
    end

    test "players_in_dungeon/1 returns the number of players id given a dungeon by its id" do
      location = location_fixture() |> Repo.preload(:map_tile)
      assert 1 == Player.players_in_dungeon(location.map_tile.dungeon_id)
      assert 0 == Player.players_in_dungeon(9999999)
    end
  end
end
