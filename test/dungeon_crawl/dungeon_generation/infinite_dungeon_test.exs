defmodule DungeonCrawl.DungeonGeneration.InfiniteDungeonTest do
  use DungeonCrawl.DataCase

  alias DungeonCrawl.Dungeons.Dungeon
  alias DungeonCrawl.DungeonGeneration.InfiniteDungeon
  alias DungeonCrawl.Repo

  test "generate_initial_levels/0" do
    dungeon = InfiniteDungeon.generate_initial_levels()
    assert %Dungeon{autogenerated: true, active: false} = dungeon
    levels = Repo.preload(dungeon, :levels).levels
    assert [1,2] == Enum.map(levels, &(&1.number)) |> Enum.sort()
    assert dungeon.autogenerated
  end

  test "generate_next_level/1" do
    dungeon = insert_autogenerated_dungeon()
    {:ok, %{level: next_level}} = InfiniteDungeon.generate_next_level(dungeon)
    assert next_level.number == 2
  end

  test "generate_next_level/1 with the dungeon id" do
    dungeon = insert_autogenerated_dungeon()
    {:ok, %{level: next_level}} = InfiniteDungeon.generate_next_level(dungeon.id)
    assert next_level.number == 2
  end
end

