defmodule DungeonCrawlWeb.ManageDungeonControllerTest do
  use DungeonCrawlWeb.ConnCase

  alias DungeonCrawl.Dungeon
  @valid_attrs %{name: "some content"}
  @invalid_attrs %{}

  setup %{conn: conn} = config do
    case config do
      %{nouser: true} -> :ok
      _    ->
        user = insert_user(%{username: config[:login_as] || "CSwaggins", is_admin: !config[:not_admin]})
        conn = assign(build_conn(), :current_user, user)
        {:ok, conn: conn, user: user}
    end
  end

  # TODO: test that non admins can't access anything here?
  @tag login_as: "notadmin", not_admin: true
  test "redirects non admin users", %{conn: conn} do
    conn = get conn, manage_dungeon_path(conn, :index)
    assert redirected_to(conn) == page_path(conn, :index)
  end

  @tag nouser: true
  test "redirects non users", %{conn: conn} do
    conn = get conn, manage_dungeon_path(conn, :index)
    assert redirected_to(conn) == page_path(conn, :index)
  end

  test "lists all entries on index", %{conn: conn} do
    conn = get conn, manage_dungeon_path(conn, :index)
    assert html_response(conn, 200) =~ "Listing dungeons"
  end

  test "renders form for new resources", %{conn: conn} do
    conn = get conn, manage_dungeon_path(conn, :new)
    assert html_response(conn, 200) =~ "New dungeon"
  end

  test "creates resource and redirects when data is valid", %{conn: conn} do
    conn = post conn, manage_dungeon_path(conn, :create), map: @valid_attrs
    assert redirected_to(conn) == manage_dungeon_path(conn, :show, Dungeon.get_map_by(@valid_attrs))
    assert Dungeon.get_map_by(@valid_attrs)
  end

  test "does not create resource and renders errors when data is invalid", %{conn: conn} do
    conn = post conn, manage_dungeon_path(conn, :create), map: @invalid_attrs
    assert html_response(conn, 200) =~ "New dungeon"
  end

  test "shows chosen resource", %{conn: conn} do
    dungeon = insert_autogenerated_dungeon()
    conn = get conn, manage_dungeon_path(conn, :show, dungeon)
    assert html_response(conn, 200) =~ "Dungeon: "
  end

  test "shows chosen resource with instance", %{conn: conn} do
    instance = Repo.preload insert_autogenerated_dungeon_instance(), :dungeon
    conn = get conn, manage_dungeon_path(conn, :show, instance.dungeon, instance_id: instance.id)
    assert html_response(conn, 200) =~ "Dungeon: "
  end

  test "renders page not found when id is nonexistent", %{conn: conn} do
    assert_error_sent 404, fn ->
      get conn, manage_dungeon_path(conn, :show, -1)
    end
  end

  test "deletes chosen resource", %{conn: conn} do
    dungeon = insert_autogenerated_dungeon()
    conn = delete conn, manage_dungeon_path(conn, :delete, dungeon)
    assert redirected_to(conn) == manage_dungeon_path(conn, :index)
    assert Dungeon.get_map(dungeon.id)
    assert Dungeon.get_map(dungeon.id).deleted_at
  end

  # TODO: delete dungeon that has autogenerated dungeon instance with player && validate player and dungeon instance are intact and no errors raised.
  # OR just have the soft delete for teh dungeon.
end
