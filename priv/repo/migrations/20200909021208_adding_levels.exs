defmodule DungeonCrawl.Repo.Migrations.AddingLevels do
  use Ecto.Migration

  def up do
    create table(:map_sets) do
      add :name, :string
      add :autogenerated, :boolean
      add :state, :string
      add :active, :boolean
      add :version, :integer
      add :deleted_at, :naive_datetime
      add :previous_version_id, references(:map_sets, on_delete: :delete_all)
      add :user_id, references(:users, on_delete: :nilify_all)

      timestamps()
    end

    create table(:map_set_instances) do
      add :name, :string
      add :autogenerated, :boolean
      add :state, :string

      add :map_set_id, references(:map_sets, on_delete: :delete_all)

      timestamps()
    end

    alter table(:dungeons) do
      add :map_set_id, references(:map_sets, on_delete: :delete_all)
      add :number, :integer
      add :entrance, :boolean
    end
    alter table(:map_instances) do
      add :map_set_instance_id, references(:map_set_instances, on_delete: :delete_all)
      add :number, :integer
      add :entrance, :boolean
    end

    flush()

    # TODO: update data
    execute """
      INSERT INTO map_sets(id, name, autogenerated, state, active, version, user_id,
                           previous_version_id, deleted_at, inserted_at, updated_at)
             SELECT d0."id", d0."name", d0."autogenerated", d0."state", d0."active", d0."version", d0."user_id",
                    d0."previous_version_id", d0."deleted_at", d0."inserted_at", d0."updated_at"
             FROM "dungeons" AS d0
    """
    execute """
      INSERT INTO map_set_instances(id, name, autogenerated, state, inserted_at, updated_at)
             SELECT d0.id, d0."name", false as "autogenerated", d0.state, d0.inserted_at, d0.updated_at 
             FROM "map_instances" AS d0
    """
    execute """
      UPDATE dungeons
      set map_set_id = id, number = 1, entrance = true
    """
    execute """
      UPDATE map_instances
      set map_set_instance_id = id, number = 1, entrance = true
    """
    execute """
      SELECT setval('map_sets_id_seq'::regclass, max(map_sets.id)) FROM map_sets
    """
    execute """
      SELECT setval('map_set_instances_id_seq'::regclass, max(map_set_instances.id)) FROM map_set_instances
    """

    # adding indexes
    create index(:dungeons, [:map_set_id])
    create index(:map_instances, [:map_set_instance_id])
    create index(:map_sets, [:deleted_at])
    create index(:map_sets, [:active])
  end

  def down do
    alter table(:map_instances) do
      remove :map_set_instance_id
      remove :number
      remove :entrance
    end
    alter table(:dungeons) do
      remove :map_set_id
      remove :number
      remove :entrance
    end
    drop table(:map_set_instances)
    drop table(:map_sets)
  end
end
