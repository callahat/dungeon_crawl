defmodule DungeonCrawl.DungeonGeneration.InfiniteDungeon do
  alias DungeonCrawl.Admin
  alias DungeonCrawl.Dungeons
  alias DungeonCrawl.Dungeons.Dungeon
  alias DungeonCrawl.MapGenerators.{ConnectedRooms, Labrynth}
  alias DungeonCrawl.Repo

  @level_generators Application.get_env(:dungeon_crawl, :generators) || [ConnectedRooms, Labrynth]

  @doc """
  Generates the first two levels of a dungeon. This is meant for "autogenerate and go solo"
  experiences.
  """
  def generate_initial_levels() do
    dungeon_attrs =  %{name: "Autogenerated", autogenerated: true}
    level_attrs = %{name: "Autogenerated", width: Admin.get_setting.autogen_width, height: Admin.get_setting.autogen_height}

    {:ok, dungeon} = Dungeons.generate_dungeon(Enum.random(@level_generators), dungeon_attrs, level_attrs)
    generate_next_level(dungeon)
    dungeon
  end

  @doc """
  Generates the next level of an already existing infinite dungeon.
  """
  def generate_next_level(%Dungeon{} = dungeon) do
    level_numbers = Repo.preload(dungeon, :levels).levels |> Enum.map(&(&1.number))
    next_number = Enum.max(level_numbers) + 1
    _generate_next_level(dungeon, next_number)
  end
  def generate_next_level(dungeon_id) do
    Dungeons.get_dungeon(dungeon_id)
    |> generate_next_level()
  end
  def _generate_next_level(dungeon, next_number) do
    # Pick other stuff at random, more random attrs the higher the level?
    level_attrs = %{dungeon_id: dungeon.id,
                    number: next_number,
                    height: Admin.get_setting.autogen_height,
                    width: Admin.get_setting.autogen_width}
    Dungeons.generate_level(Enum.random(@level_generators), level_attrs)
  end
end

