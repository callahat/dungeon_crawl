defmodule DungeonCrawl.Player do
  @moduledoc """
  The Player context.
  """

  import Ecto.Query, warn: false
  alias DungeonCrawl.Repo

  alias DungeonCrawl.Player.Location

  @doc """
  Gets a single location.

  Raises `Ecto.NoResultsError` if the Location does not exist when using the `!` version.

  ## Examples

      iex> get_location!("user_id_hash")
      %Location{}

      iex> get_location!(456)
      ** (Ecto.NoResultsError)

  """
  def get_location(user_id_hash), do: Repo.get_by(Location, %{user_id_hash: user_id_hash})
  def get_location!(user_id_hash), do: Repo.get_by!(Location, %{user_id_hash: user_id_hash})

  @doc """
  Creates a location.

  ## Examples

      iex> create_location(%{field: value})
      {:ok, %Location{}}

      iex> create_location(%{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def create_location(attrs \\ %{}) do
    %Location{}
    |> Location.changeset(attrs)
    |> Repo.insert()
  end
  def create_location!(attrs \\ %{}) do
    %Location{}
    |> Location.changeset(attrs)
    |> Repo.insert!()
  end

  @doc """
  Deletes a Location.

  ## Examples

      iex> delete_location!(location)
      %Location{}

      iex> delete_location!(location)
      # Exception raised if bad location

  """
  def delete_location!(%Location{} = location) do
    location = Repo.preload(location, [map_tile: [dungeon: :dungeon]])

    if location.map_tile.dungeon.dungeon.autogenerated do
      DungeonCrawl.Dungeon.delete_map!(location.map_tile.dungeon.dungeon)
      location
    else
      Repo.delete!(location.map_tile)
      if Repo.one(from l in Location,
                left_join: mt in assoc(l, :map_tile),
                where: mt.map_instance_id == ^location.map_tile.map_instance_id,
                select: count(mt.id)) == 0 do
        DungeonCrawl.DungeonInstances.delete_map!(location.map_tile.dungeon)
      end
      location
    end
  end
  def delete_location!(user_id_hash) do
    location = get_location(user_id_hash)
    delete_location!(location)
  end

  @doc """
  Returns an `%Ecto.Changeset{}` for tracking location changes.

  ## Examples

      iex> change_location(location)
      %Ecto.Changeset{source: %Location{}}

  """
  def change_location(%Location{} = location, attrs \\ %{}) do
    Location.changeset(location, attrs)
  end

  @doc """
  Returns a count of how many players are in a dungeon

  ## Examples

      iex> player_count(103)
      4
  """
  def players_in_dungeon(%DungeonCrawl.Dungeon.Map{id: dungeon_id}) do
    Repo.one(from m in DungeonCrawl.Dungeon.Map,
             where: m.id == ^dungeon_id,
             left_join: mi in assoc(m, :map_instances),
             left_join: mt in assoc(mi, :dungeon_map_tiles),
             left_join: pmt in assoc(mt, :player_locations),
             select: count(pmt.id))
  end
  def players_in_dungeon(%DungeonCrawl.DungeonInstances.Map{id: instance_id}) do
    Repo.one(from m in DungeonCrawl.DungeonInstances.Map,
             where: m.id == ^instance_id,
             left_join: mt in assoc(m, :dungeon_map_tiles),
             left_join: pmt in assoc(mt, :player_locations),
             select: count(pmt.id))
  end
end
