defmodule DungeonCrawl.Dungeon do
  alias Ecto.Multi

  @moduledoc """
  The Dungeon context.
  """

  import Ecto.Query, warn: false
  alias DungeonCrawl.Repo

  alias DungeonCrawl.Dungeon.Map
  alias DungeonCrawl.Dungeon.MapTile

  @doc """
  Returns the list of dungeons.

  ## Examples

      iex> list_dungeons()
      [%Map{}, ...]

  """
  def list_dungeons do
    Repo.all(Map)
  end

  @doc """
  Gets a single map.

  Raises `Ecto.NoResultsError` if the Map does not exist.

  ## Examples

      iex> get_map!(123)
      %Map{}

      iex> get_map!(456)
      ** (Ecto.NoResultsError)

  """
  def get_map!(id), do: Repo.get!(Map, id)

  @doc """
  Creates a map.

  ## Examples

      iex> create_map(%{field: value})
      {:ok, %Map{}}

      iex> create_map(%{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def create_map(attrs \\ %{}) do
    %Map{}
    |> Map.changeset(attrs)
    |> Repo.insert()
  end

  @doc """
  Autogenerates a map.

  ## Examples

      iex> generate_map(DungeonGenerator, %{field: value})
      {:ok, %Map{}}

      iex> generate_map(DungeonGenerator, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def generate_map(dungeon_generator, attrs \\ %{}) do
    Multi.new
    |> Multi.insert(:dungeon, Map.changeset(%Map{}, attrs) |> Ecto.Changeset.put_change(:autogenerated, true))
    |> Multi.run(:dungeon_map_tiles, fn(%{dungeon: dungeon}) ->
        result = Repo.insert_all(MapTile, _generate_dungeon_map_tiles(dungeon, dungeon_generator))
        {:ok, result}
      end)
    |> Repo.transaction()
  end

  defp _generate_dungeon_map_tiles(dungeon, dungeon_generator) do
    dungeon_generator.generate(dungeon.height, dungeon.width)
    |> Enum.to_list
    |> Enum.map(fn({{row,col}, tile}) -> %{dungeon_id: dungeon.id, row: row, col: col, tile: to_string([tile])} end)
  end

  @doc """
  Updates a map.

  ## Examples

      iex> update_map(map, %{field: new_value})
      {:ok, %Map{}}

      iex> update_map(map, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def update_map(%Map{} = map, attrs) do
    map
    |> Map.changeset(attrs)
    |> Repo.update()
  end

  @doc """
  Deletes a Map.

  ## Examples

      iex> delete_map(map)
      {:ok, %Map{}}

      iex> delete_map(map)
      {:error, %Ecto.Changeset{}}

  """
  def delete_map(%Map{} = map) do
    Repo.delete(map)
  end
  def delete_map!(%Map{} = map) do
    Repo.delete!(map)
  end

  @doc """
  Returns an `%Ecto.Changeset{}` for tracking map changes.

  ## Examples

      iex> change_map(map)
      %Ecto.Changeset{source: %Map{}}

  """
  def change_map(%Map{} = map) do
    Map.changeset(map, %{})
  end

  @doc """
  Returns the list of dungeon_map_tiles.

  ## Examples

      iex> list_dungeon_map_tiles()
      [%MapTile{}, ...]

  """
  def list_dungeon_map_tiles do
    Repo.all(MapTile)
  end

  @doc """
  Gets a single map_tile.

  Raises `Ecto.NoResultsError` if the Map tile does not exist.

  ## Examples

      iex> get_map_tile!(123)
      %MapTile{}

      iex> get_map_tile!(456)
      ** (Ecto.NoResultsError)

  """
  def get_map_tile!(id), do: Repo.get!(MapTile, id)

  @doc """
  Creates a map_tile.

  ## Examples

      iex> create_map_tile(%{field: value})
      {:ok, %MapTile{}}

      iex> create_map_tile(%{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def create_map_tile(attrs \\ %{}) do
    %MapTile{}
    |> MapTile.changeset(attrs)
    |> Repo.insert()
  end

  @doc """
  Updates a map_tile.

  ## Examples

      iex> update_map_tile(map_tile, %{field: new_value})
      {:ok, %MapTile{}}

      iex> update_map_tile(map_tile, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def update_map_tile(%MapTile{} = map_tile, attrs) do
    map_tile
    |> MapTile.changeset(attrs)
    |> Repo.update()
  end

  @doc """
  Deletes a MapTile.

  ## Examples

      iex> delete_map_tile(map_tile)
      {:ok, %MapTile{}}

      iex> delete_map_tile(map_tile)
      {:error, %Ecto.Changeset{}}

  """
  def delete_map_tile(%MapTile{} = map_tile) do
    Repo.delete(map_tile)
  end

  @doc """
  Returns an `%Ecto.Changeset{}` for tracking map_tile changes.

  ## Examples

      iex> change_map_tile(map_tile)
      %Ecto.Changeset{source: %MapTile{}}

  """
  def change_map_tile(%MapTile{} = map_tile) do
    MapTile.changeset(map_tile, %{})
  end
end
