defmodule DungeonCrawl.Dungeon.MapSet do
  use Ecto.Schema
  import Ecto.Changeset

  alias DungeonCrawl.Admin
  alias DungeonCrawl.TileTemplates.TileTemplate

  schema "map_sets" do
    field :name, :string
    field :autogenerated, :boolean, default: false
    field :version, :integer, default: 1
    field :active, :boolean, default: false
    field :state, :string
    field :deleted_at, :naive_datetime

    has_many :map_set_instances, DungeonCrawl.DungeonInstances.MapSet, foreign_key: :map_set_id, on_delete: :delete_all
    has_many :dungeons, DungeonCrawl.Dungeon.Map, foreign_key: :map_set_id, on_delete: :delete_all
    has_many :spawn_locations, through: [:dungeons, :spawn_locations], on_delete: :delete_all
    has_many :locations, through: [:map_set_instances, :locations], on_delete: :delete_all
    has_many :next_versions, DungeonCrawl.Dungeon.MapSet, foreign_key: :previous_version_id, on_delete: :nilify_all
    belongs_to :previous_version, DungeonCrawl.Dungeon.MapSet, foreign_key: :previous_version_id
    belongs_to :user, DungeonCrawl.Account.User

    timestamps()
  end

  @doc false
  def changeset(map, attrs) do
    %{max_height: max_height, max_width: max_width} = Map.take(Admin.get_setting, [:max_height, :max_width])
    map
    |> cast(attrs, [:name,:version,:autogenerated,:active,:previous_version_id,:deleted_at,:user_id,:state])
    |> cast_assoc(:dungeons)
    |> validate_length(:name, max: 32)
    |> validate_required([:name])
    |> TileTemplate.validate_state_values
  end
end
