defmodule DungeonCrawl.Shipping.DungeonImports do
  @moduledoc """
  The Dungeon Importer module. Its goal is to take an exported dungeon representation,
  generated by DungeonExports, and find or create all tile templates, sounds, and items, as
  well as the dungeon, its levels, and all the associated tiles. Temporary ID's and temporary
  slugs will be replaced with the proper found or created ones. If assets are created (since
  they did not exist or were not useable by the user running the import) they will be set
  to private and owned by the importing user.
  """

  alias DungeonCrawl.Equipment
  alias DungeonCrawl.Shipping.DungeonExports
  alias DungeonCrawl.TileTemplates
  alias DungeonCrawl.Sound

  use DungeonCrawl.Shipping.SlugMatching

  import DungeonCrawl.Shipping.Private.ImportFunctions

  defstruct dungeon: nil,
            levels: %{},
            tiles: %{},
            items: %{},
            tile_templates: %{},
            sounds: %{}

  def run(%DungeonExports{} = export, user_id, line_identifier \\ nil) do
    export = find_or_create_assets(export, :sounds, &find_effect/2, &Sound.create_effect!/1, user_id)
             |> find_or_create_assets(:items, &find_item/2, &Equipment.create_item!/1, user_id)
             |> find_or_create_assets(:tile_templates, &find_tile_template/2, &TileTemplates.create_tile_template!/1, user_id)
             |> swap_scripts_to_tmp_scripts(:tiles)
             |> repoint_ttids_and_slugs(:tiles)
             |> repoint_ttids_and_slugs(:items)
             |> repoint_ttids_and_slugs(:tile_templates)
             |> repoint_dungeon_starting_items()
             |> set_dungeon_overrides(user_id, line_identifier)
             |> maybe_handle_previous_version()
             |> create_dungeon()
             |> create_levels()
             |> create_spawn_locations()
             |> complete_dungeon_import()

    export
  end
end
