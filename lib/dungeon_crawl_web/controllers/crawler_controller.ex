defmodule DungeonCrawlWeb.CrawlerController do
  use DungeonCrawl.Web, :controller

  alias DungeonCrawl.Player
  alias DungeonCrawl.Dungeon
  alias DungeonCrawl.Dungeon.Map
  alias DungeonCrawl.DungeonGenerator
  alias Ecto.Multi

  plug :assign_player_location when action in [:show, :create]
  plug :validate_not_crawling  when action in [:create]

  @dungeon_generator Application.get_env(:dungeon_crawl, :generator) || DungeonGenerator

#  def index(conn, _params) do
#    render(conn, "index.html", crawler: crawler)
#  end

  def show(conn, _opts) do
    player_location = conn.assigns[:player_location]

    render(conn, "show.html", player_location: player_location)
  end

  def create(conn, _opts) do
    dungeon_attrs = (%{name: "Autogenerated", width: 80, height: 40})

    # TODO: revisit multi's and clean this up
    Multi.new
    |> Multi.run(:dungeon, fn(%{}) ->
        result = Dungeon.generate_map(DungeonGenerator, dungeon_attrs)
        {:ok, result}
      end)
    |> Multi.run(:player_location, fn(%{dungeon: dungeon_result}) ->
        {_, run_results} = dungeon_result
        dungeon = run_results[:dungeon]
        empty_floor = Repo.preload(dungeon, :dungeon_map_tiles).dungeon_map_tiles
                      |> Enum.filter(fn(t) -> t.tile == "." end)
                      |> Enum.random
        result = Player.create_location(%{dungeon_id: dungeon.id,row: empty_floor.row, col: empty_floor.col, user_id_hash: conn.assigns[:user_id_hash]})
        {:ok, result}
      end)
    |> Repo.transaction
    |> case do
      {:ok, %{dungeon: _dungeon}} ->
        conn
        |> put_flash(:info, "Dungeon created successfully.")
        |> redirect(to: crawler_path(conn, :show))
    end
  end

  def destroy(conn, _opts) do
    player_location = Player.get_location(conn.assigns[:user_id_hash])
    
    Player.delete_location!(player_location)

    conn
    |> put_flash(:info, "Dungeon cleared.")
    |> redirect(to: crawler_path(conn, :show))
  end

  defp assign_player_location(conn, _opts) do
    player_location = Player.get_location(conn.assigns[:user_id_hash])
                      |> Repo.preload(dungeon: :dungeon_map_tiles)
    conn
    |> assign(:player_location, player_location)
  end

  defp validate_not_crawling(conn, _opts) do
    if conn.assigns.player_location == nil do
      conn
    else
      conn
      |> put_flash(:info, "Already crawling dungeon")
      |> redirect(to: crawler_path(conn, :show))
      |> halt()
    end
  end
end
