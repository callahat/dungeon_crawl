<h3>Reference</h3>

<div>
  <h5>The Dungeon Map</h5>

  <p>The dungeon map is a collection of map tiles. The visible representation is only in two dimensions, but
     there are three dimensions used for denoting the position of a map tile (row and column for the 2d,
     and z_index for the layer or position on the stack). A player moves their avatar around the board
     only on tiles that are not blocking. A row/column coordinate without any tiles is treated as impassable,
     as are the edges outside the board itself.</p>

  <h5>The Dungeon Map Tile</h5>

  <p>The dungeon map tile is a single element in a dungeon. It makes up everything, from walls, floors,
     monsters, as well as player avatars. The player avatar map tile is similar to other map tiles.
     A map tile is simply an object with has coordinates (row, column, z_index), a character that is displayed
     (such as "M"), a foreground color, a background color, as well as state values and a script (state and
     script are optional). State values tell about the map tiles state, such as if it is blocking, or pushable,
     as well as other information that might be used in its script (such as number of cycles left for a count down).
     The script controls more complicated behavior of the map tile (further reference below).
     </p>

  <h5>State Attributes and Values</h5>

  <p>There are several standard behaviors based on certain state values.</p>

  <table>
    <tr>
      <th>State Attribute</th>
      <th>Standard Behavior</th>
    </tr>
    <tr>
      <td>blocking</td>
      <td>If this is false, the tile is not blocking. Another map tile will not be prevented
          from moving on top of it. When true (or not present), it acts as a wall and stops
          another tile from moving onto it. Additionally it sends the "THUD" message to any
          tile attempting to move there.</td>
    </tr>
    <tr>
      <td>pushable</td>
      <td>When true, the map tile may be shoved around by another map tile moving into its row column coordinates.
          The pushed map tile will attempt to move in the same direction that the pushing tile is moving (ie,
          tile A moves west to tile B's coordinates, tile B will attempt to also move west). However, if the pushed
          tile cannot move (such as another blocking tile is where it would be going), then it does not move, and
          blocks the other tile.</td>
    </tr>
    <tr>
      <td>squishable</td>
      <td>When true, the map tile may be "squished" which removes it. A map tile that is squishable, but not pushable
          will be removed when another tile moves into its row column coordinates. However, if it is pushable, it will
          move in the manner described for a pushable map tile if able; and if unable it will then be removed and the
          "squishing" tile will enter its coordinates.</td>
    </tr>
    <tr>
      <td>destroyable</td>
      <td>When true, this map tile will be removed if it receives the "SHOT" message.</td>
    </tr>
    <tr>
      <td>not_pushing</td>
      <td>If set to true, this tile will not push tiles when moving. It will treat a pushable tile as non blocking
          (unless that tile actually has the blocking value true).</td>
    </tr>
    <tr>
      <td>not_squishing</td>
      <td>If set to true, this tile will not squish tiles when it is moving.</td>
    </tr>
    <tr>
      <td>health</td>
      <td>This is used to indicate how much health a tile has. When it reaches or drops below zero,
          the tile is removed (unless that tile is a player's tile). Where destroyable indicates a tile can be
          destroyed when shot or damaged, a tile with health could be shot or damaged many times before destroyed.</td>
    </tr>
    <tr>
      <td>damage</td>
      <td>This is how much will be subtracted from a tile's health when this tile sends it a "SHOT" message.
          Defaults to zero.</td>
    </tr>
    <tr>
      <td>wait_cycles</td>
      <td>How many cycles a script will wait until executing the next instruction after it executes an instruction
          that causes it to wait (ie, a movement instruction). Defaults to 5. Each cycle is approximately 50ms.</td>
    </tr>
  </table>

  <h5>Scripting</h5>

  <p>A script can be defined which will control additional behavior of the map tile beyond the basic
     built in state values. A script begins running commands starting at the top, and working its way down.
     Certain commands, such as movement, will pause the script for a noticable amount of time (determined by
     the "wait_cycles"). When a map tile receives a message it can react, the program will jump and start
     executing instructions from that point. A message will be reacted to if it is one of the standard behaviors,
     or if the map tile has a matching label in its script.</p>

  <p>The script will continue to run until there are no more instructions it can run, or it encounters the END or
     TERMINATE instruction. For the former two, the script will be idle, and will no nothing further unless it receives
     a message to which it is able to respond.</p>

  <p>One instruction per line. Each line may have a prefix, denoting what that line is.</p>

  <table>
    <tr>
      <th>Prefix</th>
      <th>Type</th>
      <th>Description</th>
      <th>Examples</th>
    </tr>
    <tr>
      <td>:</td>
      <td>Label</td>
      <td>When a map tile receives a message, this is where the program will start executing instructions
          at. There can be many of the same label, but the highest active label will be used. Labels
          can be activated and deactivated, but are initially active.</td>
      <td>:open</td>
    </tr>
    <tr>
      <td>@</td>
      <td>State Value</td>
      <td>This is for setting state values. "@", followed by the name of the state value, followed by an operator,
          followed by a value.</td>
      <td>@open = false<br/>
          @HEALTH += 30</td>
    </tr>
    <tr>
      <td>@@</td>
      <td>Dungeon value</td>
      <td>Similar to the State Value, however this is for the entire dungeon.</td>
      <td>@@ALARM = true</td>
    </tr>
    <tr>
      <td>/</td>
      <td>Shorthand</td>
      <td>Shorthand for the "GO" command. Slash followed by a n, s, e, or w (for north, south east or west).
          Shorthands can be chained together on the same line</td>
      <td>/n/s/n/s</td>
    </tr>
    <tr>
      <td>?</td>
      <td>Shorthand</td>
      <td>Shorthand for the "TRY" command. Question mark followed by a n, s, e, or w (for north, south east or west)</td>
      <td>?n?s?n?s<br/>
          /n?e?e</td>
    </tr>
    <tr>
      <td>#</td>
      <td>Command</td>
      <td>Run a command. Commands will sometimes have a list of parameters, or a list of keyword arguments (KWARGS).
          See the command reference further down.</td>
      <td>#BECOME slug: breakable_wall, color: @color<br/>
          #SEND_MESSAGE north, touch</td>
    </tr>
    <tr>
      <td>&lt;no prefix&gt;</td>
      <td>Text</td>
      <td>This will display a text message to the player that sent the last message (ie, a player tile touches
          a tile and said player sees a message). If there were none, nothing noticable happens.</td>
      <td>Hello player</td>
    </tr>
  </table>

  <b>Script Commands</b>

  <table>
    <tr>
      <th>Command</th>
      <th>Params</th>
      <th>Description</th>
      <th>Examples</th>
    </tr>

  </table>


  <b>System messages</b>

  <p>Currently there are only a few messages that will be sent when certain things happen.</p>

  <table>
    <tr>
      <th>Message</th>
      <th>When Sent</th>
    </tr>
    <tr>
      <td>THUD</td>
      <td>Send to the map tile when it attempts to move but is blocked.</td>
    </tr>
    <tr>
      <td>TOUCH</td>
      <td>Sent when a moving map tile attempts or successfully moves to
          a map tile already at those coordinates.</td>
    </tr>
    <tr>
      <td>OPEN</td>
      <td>Sent by a player tile when a player hits the O key plus a direction.</td>
    </tr>
    <tr>
      <td>CLOSE</td>
      <td>Sent by a player tile when a player hits the C key plus a direction.</td>
    </tr>
  </table>

(limit div width to max 600 px, want a decent readable column width)


Available scripting commands, and what each line prefix does. And list of standard messages and when they will be sent.



</div>



<div>
  <nav class="col-md-2 col-lg-2 d-none d-md-block bg-light sidebar">
    <div class="sidebar-sticky">
      <ul class="nav flex-column">
        <li class="nav-item px-2">
          Reference - Todo expand this 
        </li>
      </ul>
    </div>
  </nav>
</div>
